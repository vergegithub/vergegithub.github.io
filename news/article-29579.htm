<!doctype html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vergegithub.github.io/news/article-29579.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>Python OpenCV实现3种滤镜效果实例_python_</title>
        <meta name="description" content="目录  前言 浮雕滤镜效果 雕刻滤镜效果 凸透镜滤镜效果 总结    前言 本篇文章要使用OpenCV、Numpy 和Math这3个工具包实现一个简单的滤镜编辑器。在这个滤镜编辑器中，包含了3种滤镜效" />
        <link rel="icon" href="/assets/website/img/vergegithub/favicon.ico" type="image/x-icon"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <!-- css here -->
    <link rel="stylesheet" href="/assets/website/css/vergegithub/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/meanmenu.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/animate.min.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/fontawesome-all.min.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/scrolltop.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/swiper.min.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/default.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/style.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/responsive.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-VCFC00Q4E1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-VCFC00Q4E1');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- preloaders start -->
    <div class="preloader">
        <div class="spinner">
            <div class="rect1"></div>
            <div class="rect2"></div>
            <div class="rect3"></div>
            <div class="rect4"></div>
            <div class="rect5"></div>
        </div>
    </div>
    <!-- preloaders end -->
    <!-- header area start -->
    <header>
        <!-- header area start -->
        <div class="header-area">
            <div class="container">
                <div class="row">
                    <!-- logo start -->
                    <div class="col-md-4">
                        <div class="header-logo">
                            <a href="/">
                                                                <span>Verge Github</span>
                                                            </a>
                        </div>
                    </div>
                    <!-- main menu area start -->
                    <div class="col-md-8">
                        <div class="main-menu-area float-right">
                            <div class="main-menu">
                                <nav id="mobile-menu">
                                    <ul>
                                                                                <li><a href="/">首页</a></li>
                                                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                                <li><a href="/news/">新闻资讯</a></li>
                                                                                <li><a href="#">关于</a></li>
                                        <li><a href="#">联系</a></li>
                                    </ul>
                                </nav>
                            </div>
                        </div>
                        <div class="mobile-menu"></div>
                    </div>
                    <!-- main menu area end -->
                </div>
            </div>
        </div>
        <!-- header area end -->
    </header>
    <!-- header area end -->
    <!-- main area start -->
    <main>
        <!-- breadcrumb area start -->
        <div id="apork-breadcrumb-area" class="apork-breadcrumb-area text-center">
            <div class="container">
                <div class="row">
                    <div class="col-md-12">
                        <h1>Python OpenCV实现3种滤镜效果实例_python_</h1>
                        <ul class="breadcrumb justify-content-center">
                            <li class="breadcrumb-item"><a href="/" title="首页">首页</a></li>
                            <li class="breadcrumb-item"><a href="/news/" title="新闻资讯">新闻资讯</a></li>
                            <li class="breadcrumb-item active">正文</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- breadcrumb area end -->
        <!-- about area start -->
        <div class="apork-about-area mt-230 mb-90">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Verge Clash节点订阅官网" data-url="https://vergeclash.github.io">
                  				  				  				<div id="navCategory"> <h5 class="catalogue">目录</h5> <ul class="first_class_ul"> <li><a href="#_label0" rel="nofollow">前言</a></li> <li><a href="#_label1" rel="nofollow">浮雕滤镜效果</a></li> <li><a href="#_label2" rel="nofollow">雕刻滤镜效果</a></li> <li><a href="#_label3" rel="nofollow">凸透镜滤镜效果</a></li> <li><a href="#_label4" rel="nofollow">总结</a></li> </ul> </div> <p class="maodian"><a name="_label0" rel="nofollow"></a></p> <h2>前言</h2> <p>本篇文章要使用OpenCV、Numpy 和Math这3个工具包实现一个简单的滤镜编辑器。在这个滤镜编辑器中，包含了3种滤镜效果，它们分别是浮雕滤镜、雕刻滤镜和凸透镜滤镜。本篇文章将对目标图像（如图1所示）进行处理，使得目标图像分别呈现浮雕滤镜（如图2所示）、雕刻滤镜（如图3所示）和凸透镜滤镜（如图4所示）的视觉效果。</p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220413/06e3852ed5a090cc3451df22fed2c24d.jpg"></p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220413/c66ffa83a043a2964660886d28d544d7.jpg"></p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220413/09e490a9749fcf5f84b6a04cb3d1adf5.jpg"></p> <p style="text-align:center"><img decoding="async" alt="" src="http://img.555519.xyz/uploads3/20220413/385bd7dc214359f58688a965d857898f.jpg"></p> <p class="maodian"><a name="_label1" rel="nofollow"></a></p> <h2>浮雕滤镜效果</h2> <p>为了实现浮雕滤镜效果，首先要把实现浮雕滤镜效果的原理搞清楚、弄明白。实现浮雕滤镜效果的原理如下所示：</p> <ul> <li> <p>根据灰度图像中的某一个像素的像素值与其周围像素的像素值之间的差值，确定这个像素经过卷积处理后的像素值；</p> </li> <li> <p>由于边缘点的像素值与其周围像素的像素值之间的差值较大，经卷积处理后，导致这些边缘点较亮，从而达到凸显边缘的目的，进而形成浮雕状；</p> </li> <li> <p>为经卷积处理后的每一个像素加上一个灰度偏移值128，作为呈现浮雕滤镜效果的图像的底色。</p> </li> </ul> <p>明确了实现浮雕滤镜效果的原理后，再来学习一下实现浮雕滤镜效果的算法。实现浮雕滤镜效果的算法如下所示：</p> <ul> <li> <p>对灰度图像中的每一个像素进行卷积处理；</p> </li> <li> <p>实现浮雕滤镜效果的卷积核算子需采用如下矩阵：</p> </li> </ul> <blockquote> <p>[[1, 0], [0, -1]]</p> </blockquote> <p>掌握了实现浮雕滤镜效果的原理和算法后，下面开始编写用于实现浮雕滤镜效果的方法，即<code>fuDiao()</code>方法。<code>fuDiao()</code>方法是一个自定义的、有参且有返回值的方法，<code>fuDiao()</code>方法的语法格式如下所示：</p> <div class="ay1code"> <pre class="brush:py;">def fuDiao(img):      ……# 省略方法体中的代码      return canvas</pre> </div> <p><strong>参数说明：</strong></p> <blockquote> <p> img：与目标图像对应的灰度图像。</p> </blockquote> <p><strong>返回值说明：</strong></p> <blockquote> <p>canvas：画布，用于呈现浮雕滤镜效果的图像。</p> </blockquote> <p>那么，<code>fuDiao()方法</code>被省略的代码各自发挥怎样的作用？此外，被省略的代码又是那些呢？</p> <p><strong>先要明确fuDiao()方法中被省略的代码各自发挥的作用是什么：</strong></p> <p><strong>因为用于实现浮雕滤镜效果的卷积核算子是一个二维矩阵，所以需要使用<code>Numpy工具包</code>中的<code>array()方法</code>创建这个二维矩阵。关键代码如下所示：</strong></p> <div class="ay1code"> <pre class="brush:py;">kernel = np.array([[1, 0], [0, -1]])</pre> </div> <p><strong>分别获取灰度图像中像素的行数和列数。关键代码如下所示：</strong></p> <div class="ay1code"> <pre class="brush:py;">row = img.shape[0]  col = img.shape[1]</pre> </div> <p>根据灰度图像中像素的行数和列数，创建一个等高、等宽的，纯黑色的画布。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">canvas = np.zeros([row, col], dtype=np.uint8)</pre> </div> <p>根据横、纵坐标，使用嵌套的for循环得到灰度图像中的每一个像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">for i in range(row - 1):  for j in range(col - 1):</pre> </div> <p>使用实现浮雕滤镜效果的卷积核算子，对灰度图像中的每一个像素进行卷积处理，并且为经卷积处理后的每一个像素加上一个灰度偏移值128。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">new_value = np.sum(img[i:i + 2, j:j + 2] * kernel) + 128</pre> </div> <p>对于经卷积处理且加上一个灰度偏移值后的每一个像素的像素值，如果大于255，那么等于255；如果小于0，那么等于0。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">if new_value &gt; 255:     new_value = 255     elif new_value &lt; 0:        new_value = 0    else:      pass</pre> </div> <p>把经过比较后的每一个像素的像素值根据坐标赋值给画布对应位置上的像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:js;">canvas[i, j] = new_value</pre> </div> <p>结合<code>fuDiao()方法</code>中被省略的代码和它们各自发挥的作用，就能够迅速完成<code>fuDiao()</code>方法的编写。<code>fuDiao()</code>方法的代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">def fuDiao(img):        kernel = np.array([[1, 0], [0, -1]])        row = img.shape[0]        col = img.shape[1]        canvas = np.zeros([row, col], dtype=np.uint8)        for i in range(row - 1):           for j in range(col - 1):               new_value = np.sum(img[i:i + 2, j:j + 2] * kernel) + 128               if new_value &gt; 255:                   new_value = 255                elif new_value &lt; 0:                   new_value = 0                else:                    pass               canvas[i, j] = new_value        return canvas</pre> </div> <p class="maodian"><a name="_label2" rel="nofollow"></a></p> <h2>雕刻滤镜效果</h2> <p><strong>实现雕刻滤镜效果的原理与实现浮雕滤镜效果的原理大致相同，实现雕刻滤镜效果的原理如下所示：</strong></p> <ul> <li> <p>根据灰度图像中的某一个像素的像素值与其周围像素的像素值之间的差值，确定这个像素经过卷积处理后的像素值；</p> </li> <li> <p>由于边缘点的像素值与其周围像素的像素值之间的差值较大，经卷积处理后，导致这些边缘点较暗，从而达到凹陷边缘的目的，进而形成雕刻状；</p> </li> <li> <p>为经卷积处理后的每一个像素加上一个灰度偏移值128，作为呈现雕刻滤镜效果的图像的底色。</p> </li> </ul> <p><strong>虽然实现雕刻滤镜效果的原理与实现浮雕滤镜效果的原理大致相同，但是实现雕刻滤镜效果的算法与实现浮雕滤镜效果的算法大不相同。实现雕刻滤镜效果的算法如下所示：</strong></p> <ul> <li> <p>对灰度图像中的每一个像素进行卷积处理；</p> </li> <li> <p>实现雕刻滤镜效果的卷积核算子需采用如下矩阵：</p> </li> </ul> <div class="ay1code"> <pre class="brush:py;">[[-1, 0],  [0, 1]]</pre> </div> <p>掌握了实现雕刻滤镜效果的原理和算法后，下面开始编写用于实现雕刻滤镜效果的方法，即<code>diaoKe()</code>方法。与<code>fuDiao()</code>方法相同，<code>diaoKe()</code>方法也是一个自定义的、有参且有返回值的方法，<code>diaoKe()</code>方法的语法格式如下所示：</p> <div class="ay1code"> <pre class="brush:py;">def diaoKe(img):     ……# 省略方法体中的代码      return canvas</pre> </div> <p><strong>参数说明：</strong></p> <blockquote> <p>img：与目标图像对应的灰度图像。</p> </blockquote> <p><strong>返回值说明：</strong></p> <blockquote> <p>canvas：画布，用于呈现雕刻滤镜效果的图像。</p> </blockquote> <p><strong>diaoKe()方法被省略的代码与fuDiao()方法被省略的代码大同小异，首先明确下diaoKe()方法中被省略的代码各自发挥的作用是什么：</strong></p> <p><strong>用于实现雕刻滤镜效果的卷积核算子与用于实现浮雕滤镜效果的卷积核算子虽然不同，但也是一个二维矩阵，因此需要使用Numpy工具包中的array()方法创建这个二维矩阵。关键代码如下所示：</strong></p> <div class="ay1code"> <pre class="brush:py;">kernel = np.array([[-1, 0], [0, 1]])</pre> </div> <p>分别获取灰度图像中像素的行数和列数。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">row = img.shape[0]  col = img.shape[1]</pre> </div> <p>根据灰度图像中像素的行数和列数，创建一个等高、等宽的，纯黑色的画布。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">canvas = np.zeros([row, col], dtype=np.uint8)</pre> </div> <p>根据横、纵坐标，使用嵌套的for循环得到灰度图像中的每一个像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">for i in range(row - 1):  for j in range(col - 1):</pre> </div> <p>使用实现雕刻滤镜效果的卷积核算子，对灰度图像中的每一个像素进行卷积处理，并且为经卷积处理后的每一个像素加上一个灰度偏移值128。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">new_value = np.sum(img[i:i + 2, j:j + 2] * kernel) + 128</pre> </div> <p>对于经卷积处理且加上一个灰度偏移值后的每一个像素的像素值，如果大于255，那么等于255；如果小于0，那么等于0。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">  if new_value &gt; 255:        new_value = 255    elif new_value &lt; 0:        new_value = 0    else:        pass</pre> </div> <p>把经过比较后的每一个像素的像素值根据坐标赋值给画布对应位置上的像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:js;">canvas[i, j] = new_value</pre> </div> <p>结合<code>diaoKe()</code>方法中被省略的代码和它们各自发挥的作用，就能够迅速完成<code>diaoKe()</code>方法的编写。<code>diaoKe()</code>方法的代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">  def diaoKe(img):        kernel = np.array([[-1, 0], [0, 1]])        row = img.shape[0]        col = img.shape[1]        canvas = np.zeros([row, col], dtype=np.uint8)        for i in range(row - 1):            for j in range(col - 1):                new_value = np.sum(img[i:i + 2, j:j + 2] * kernel) + 128                if new_value &gt; 255:                    new_value = 255                elif new_value &lt; 0:                    new_value = 0                else:                    pass                canvas[i, j] = new_value        return canvas</pre> </div> <p class="maodian"><a name="_label3" rel="nofollow"></a></p> <h2>凸透镜滤镜效果</h2> <p>所谓凸透镜滤镜效果，相当于用户使用凸透镜观察一幅图像而成的视觉效果。实现凸透镜滤镜效果的原理与实现浮雕滤镜效果的原理和实现雕刻滤镜效果的原理大不相同。下面将着重对实现凸透镜滤镜效果的原理进行讲解：</p> <ul> <li> <p>当使用凸透镜中心观察一幅图像时，被观察的图像区域将按照一定比例进行放大；相应地，这个区域的周围区域将被压缩；</p> </li> <li> <p>为了让放大后的图像区域看起来和谐自然，这些被压缩的周围区域要保持连续性。</p> </li> </ul> <p><strong>明确了实现凸透镜滤镜效果的原理后，再来学习一下实现凸透镜滤镜效果的算法。实现凸透镜滤镜效果的算法如下所示：</strong></p> <ul> <li> <p>根据目标图像的宽、高确定凸透镜的半径；</p> </li> <li> <p>选择一个凸函数作为映射函数；</p> </li> </ul> <p>如果目标图像中的某一个像素与目标图像中心之间的距离的平方不大于凸透镜的半径的平方（两个整数进行比较，保证比较结果的精确度），就使用映射函数对这个像素的横、纵坐标进行映射处理。</p> <p><strong>掌握了实现凸透镜滤镜效果的原理和算法后，下面开始编写用于实现凸透镜滤镜效果的方法，即<code>tuTouJing()</code>方法。与<code>fuDiao()</code>方法和<code>diaoKe()</code>方法相同，<code>tuTouJing()</code>方法也是一个自定义的、有参且有返回值的方法，<code>tuTouJing()</code>方法的语法格式如下所示：</strong></p> <div class="ay1code"> <pre class="brush:py;">def tuTouJing(img):      ……# 省略方法体中的代码      return canvas</pre> </div> <p>参数说明：</p> <blockquote> <p> img：目标图像。</p> </blockquote> <p>返回值说明：</p> <blockquote> <p>canvas：画布，用于呈现凸透镜滤镜效果的图像。</p> </blockquote> <p><strong>先要明确<code>tuTouJing()</code>方法中被省略的代码各自发挥的作用是什么：</strong></p> <p>分别获取目标图像中像素的行数和列数以及目标图像的通道数。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">row = img.shape[0]  col = img.shape[1]  channel = img.shape[2]</pre> </div> <p>根据目标图像中像素的行数和列数以及目标图像的通道数，创建一个等高、等宽、等通道数的，纯黑色的画布。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">canvas = np.zeros([row, col, channel], dtype=np.uint8)</pre> </div> <p>根据目标图像中像素的行数和列数，分别获取目标图像中心的横、纵坐标。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">center_x = row/2  center_y = col/2</pre> </div> <p>比较目标图像中心的横、纵坐标的大小，把较小的数值作为凸透镜的半径。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">radius = min(center_x, center_y)</pre> </div> <p>根据横、纵坐标，使用嵌套的for循环得到目标图像中的每一个像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">for i in range(row):  for j in range(col):</pre> </div> <p>计算目标图像中的每一个像素与目标图像中心之间的距离的平方和距离。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">distance = ((i-center_x) * (i-center_x) + (j-center_y) * (j-center_y))  new_dist = math.sqrt(distance)</pre> </div> <p>把目标图像中的每一个像素的像素值根据坐标赋值给画布对应位置上的像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">canvas[i,j,:] = img[i, j, :]</pre> </div> <p>如果目标图像中的某一个像素与目标图像中心之间的距离的平方不大于凸透镜的半径的平方，就使用映射函数对这个像素的横、纵坐标进行映射处理。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">if distance &lt;= radius**2:  new_i = np.int(np.floor(new_dist * (i-center_x) / radius + center_x))  new_j = np.int(np.floor(new_dist * (j-center_y) / radius + center_y))</pre> </div> <p>把经过映射处理后的每一个像素的像素值根据坐标赋值给画布对应位置上的像素。关键代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">canvas[i,j,:] = img[new_i, new_j, :]</pre> </div> <p>结合tuTouJing()方法中被省略的代码和它们各自发挥的作用，就能够迅速完成tuTouJing()方法的编写。tuTouJing()方法的代码如下所示：</p> <div class="ay1code"> <pre class="brush:py;">  def tuTouJing(img):        row = img.shape[0]        col = img.shape[1]        channel = img.shape[2]        canvas = np.zeros([row, col, channel], dtype=np.uint8)        center_x = row/2        center_y = col/2        radius = min(center_x, center_y)        for i in range(row):            for j in range(col):                distance = ((i-center_x) * (i-center_x) + (j-center_y) * (j-center_y))                new_dist = math.sqrt(distance)                canvas[i,j,:] = img[i, j, :]                if distance &lt;= radius**2:                    new_i = np.int(np.floor(new_dist * (i-center_x) / radius + center_x))                    new_j = np.int(np.floor(new_dist * (j-center_y) / radius + center_y))                    canvas[i,j,:] = img[new_i, new_j, :]        return canvas</pre> </div> <p class="maodian"><a name="_label4" rel="nofollow"></a></p> <h2>总结</h2> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-29576.htm">python2 连接hdfs 解决kerberos认证</a></p>
                                        <p>下一个：<a href="/news/article-30016.htm">北京宠爱国际动物医疗机构有限公司官网（北京宠爱国际医院怎么样）</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-20787.htm" title="合肥宠物救助中心电话（合肥宠物救助中心电话多少）">合肥宠物救助中心电话（合肥宠物救助中心电话多少）</a></li>
                        <li class="py-2"><a href="/news/article-26337.htm" title="兰州宠物交易市场在哪儿呀（兰州宠物市场在哪里）">兰州宠物交易市场在哪儿呀（兰州宠物市场在哪里）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-30-free-subscribe-node.htm" title="Verge Github节点订阅每天更新22.4M/S免费节点订阅链接">Verge Github节点订阅每天更新22.4M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-23988.htm" title="十种不能养的狗（不能养的狗狗）">十种不能养的狗（不能养的狗狗）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-15-node-share-links.htm" title="Verge Github节点订阅每天更新22.4M/S免费节点订阅链接">Verge Github节点订阅每天更新22.4M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-21243.htm" title="你不知道的Python容器">你不知道的Python容器</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-12-7-free-node-subscribe-links.htm" title="Verge Github节点订阅每天更新20M/S免费节点订阅链接">Verge Github节点订阅每天更新20M/S免费节点订阅链接</a></li>
                        <li class="py-2"><a href="/news/article-24929.htm" title="狗狗服装裁剪与制作视频（狗狗衣服裁剪法及图样）">狗狗服装裁剪与制作视频（狗狗衣服裁剪法及图样）</a></li>
                        <li class="py-2"><a href="/news/article-29108.htm" title="家庭小型狗粮加工机器（狗粮加工机械）">家庭小型狗粮加工机器（狗粮加工机械）</a></li>
                        <li class="py-2"><a href="/free-nodes/2024-11-8-node-share-links.htm" title="Verge Github节点订阅每天更新18.7M/S免费节点订阅链接">Verge Github节点订阅每天更新18.7M/S免费节点订阅链接</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">74</span> <a href="/date/2024-12/" title="2024-12 归档">2024-12</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">32</span> <a href="/date/2024-11/" title="2024-11 归档">2024-11</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
        <!-- about area end -->
                <!-- footer area start -->
        <footer id="apork-footer-area" class="apork-footer-area">
            <div class="container">
                <div class="row">
                    <div class="col-xl-12 col-lg-12">
                        <div class="footer-copyright text-center py-5">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p>
                                <a href="/">Verge Github免费机场订阅节点官网</a> 版权所有 Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!-- footer area end -->
        <!-- scrolltop button -->
        <div class="material-scrolltop"></div>
        <!-- js here -->
        <script src="/assets/website/js/frontend/vergegithub/modernizr-3.5.0.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/jquery-1.12.4.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/popper.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/bootstrap.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/swiper.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/meanmenu.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/magnific-popup.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/owl.carousel.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/waypoints.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/counterup.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/scrolltop.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/ajax-form.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/plugins.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/main.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </main>
    <!-- main area end -->
</body>

</html>