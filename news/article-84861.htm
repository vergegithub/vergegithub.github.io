<!doctype html>
<html class="no-js" lang="zh-CN">

<head>
        <link rel="canonical" href="https://vergegithub.github.io/news/article-84861.htm" />
    <meta charset="utf-8">
    <meta http-equiv="x-ua-compatible" content="ie=edge">
    <title>Python 实现走迷宫深度优先回溯算法（优质代码）</title>
        <meta name="description" content="#地图：0是可走的地方，1是障碍物     maze=np.array([[0,0,0,0,0],[0,1,0,1,0],[0,1,1,0,0],[0,1,1,0,0],[0,0,0,0,0]]) 入" />
        <link rel="icon" href="/assets/website/img/vergegithub/favicon.ico" type="image/x-icon"/>

    <meta name="author" content="Verge Github免费机场订阅节点官网">
    <meta property="og:type" content="article" />
    <meta property="og:url" content="https://vergegithub.github.io/news/article-84861.htm" />
    <meta property="og:site_name" content="Verge Github免费机场订阅节点官网" />
    <meta property="og:title" content="Python 实现走迷宫深度优先回溯算法（优质代码）" />
    <meta property="og:image" content="https://vergegithub.github.io/uploads/20241103/d1cfb9c74e266499701fed2f03da24ee.webp" />
        <meta property="og:release_date" content="2025-03-30T09:36:12" />
    <meta property="og:updated_time" content="2025-03-30T09:36:12" />
        <meta property="og:description" content="#地图：0是可走的地方，1是障碍物     maze=np.array([[0,0,0,0,0],[0,1,0,1,0],[0,1,1,0,0],[0,1,1,0,0],[0,0,0,0,0]]) 入" />
        
    <meta name="viewport" content="width=device-width, initial-scale=1">

    <meta name="applicable-device" content="pc,mobile" />
    <meta name="renderer" content="webkit" />
    <meta name="force-rendering" content="webkit" />
    <meta http-equiv="Cache-Control" content="no-transform" />
    <meta name="robots" content="max-image-preview:large" />
    <meta name="apple-mobile-web-app-capable" content="yes">
    <meta name="apple-mobile-web-app-status-bar-style" content="black">
    <meta name="apple-mobile-web-app-title" content="Python 实现走迷宫深度优先回溯算法（优质代码）">
    <meta name="format-detection" content="telephone=no">

    <link rel="dns-prefetch" href="https:/www.googletagmanager.com">
    <link rel="dns-prefetch" href="https://www.googleadservices.com">
    <link rel="dns-prefetch" href="https://www.google-analytics.com">
    <link rel="dns-prefetch" href="https://pagead2.googlesyndication.com">
    <link rel="dns-prefetch" href="https://cm.g.doubleclick.net">
    
    <!-- css here -->
    <link rel="stylesheet" href="/assets/website/css/vergegithub/bootstrap.min.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/meanmenu.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/animate.min.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/magnific-popup.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/fontawesome-all.min.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/owl.carousel.min.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/owl.theme.default.min.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/scrolltop.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/swiper.min.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/default.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/style.css">
    <link rel="stylesheet" href="/assets/website/css/vergegithub/responsive.css">
    <!-- Google tag (gtag.js) -->
<script async src="https://www.googletagmanager.com/gtag/js?id=G-VCFC00Q4E1"></script>
<script>
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-VCFC00Q4E1');
</script>
    <script async src="https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-3332997411212854"
     crossorigin="anonymous"></script>
</head>

<body data-page="detail">
        <!-- preloaders start -->
    <div class="preloader">
        <div class="spinner">
            <div class="rect1"></div>
            <div class="rect2"></div>
            <div class="rect3"></div>
            <div class="rect4"></div>
            <div class="rect5"></div>
        </div>
    </div>
    <!-- preloaders end -->
    <!-- header area start -->
    <header>
        <!-- header area start -->
        <div class="header-area">
            <div class="container">
                <div class="row">
                    <!-- logo start -->
                    <div class="col-md-4">
                        <div class="header-logo">
                            <a href="/">
                                                                <span>Verge Github</span>
                                                            </a>
                        </div>
                    </div>
                    <!-- main menu area start -->
                    <div class="col-md-8">
                        <div class="main-menu-area float-right">
                            <div class="main-menu">
                                <nav id="mobile-menu">
                                    <ul>
                                                                                <li><a href="/">首页</a></li>
                                                                                <li><a href="/free-nodes/">免费节点</a></li>
                                                                                <li><a href="/paid-subscribe/">推荐机场</a></li>
                                                                                <li><a href="/client.htm">客户端</a></li>
                                                                                <li><a href="/news/">新闻资讯</a></li>
                                                                            </ul>
                                </nav>
                            </div>
                        </div>
                        <div class="mobile-menu"></div>
                    </div>
                    <!-- main menu area end -->
                </div>
            </div>
        </div>
        <!-- header area end -->
    </header>
    <!-- header area end -->
    <!-- main area start -->
    <main>
        <!-- breadcrumb area start -->
        <div id="apork-breadcrumb-area" class="apork-breadcrumb-area text-center">
            <div class="container">
                <div class="row">
                    <div class="col-md-12">
                        <h1>Python 实现走迷宫深度优先回溯算法（优质代码）</h1>
                        <ul class="breadcrumb justify-content-center">
                            <li class="breadcrumb-item"><a href="/" title="首页">首页</a></li>
                            <li class="breadcrumb-item"><a href="/news/" title="新闻资讯">新闻资讯</a></li>
                            <li class="breadcrumb-item active">正文</li>
                        </ul>
                    </div>
                </div>
            </div>
        </div>
        <!-- breadcrumb area end -->
        <!-- about area start -->
        <div class="apork-about-area mt-230 mb-90">
            <div class="container">
                <div class="row">
                    <div class="col-md-9">
                                        <input type="hidden" id="share-website-info" data-name="Verge Clash节点订阅官网" data-url="https://vergeclash.github.io">
                  				  				  				<div id="content_views" class="markdown_views prism-atom-one-light"> </h1> <pre><code class="prism language-python"><span class="token comment">#地图：0是可走的地方，1是障碍物</span>     maze<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span></code></pre> <p>入口和出口：</p> <pre><code class="prism language-python">    startP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#起点坐标</span>     endP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#终点坐标</span></code></pre> <p>没有传送门</p> </h1> <pre><code class="prism language-python"><span class="token keyword">import</span> numpy<span class="token keyword">as</span> np</code></pre> </h1> <pre><code class="prism language-python"><span class="token triple-quoted-string string">''' 类:Point 用来标识坐标点 '''</span><span class="token keyword">class</span><span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span><span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>row<span class="token operator">=</span>x         self<span class="token punctuation">.</span>col<span class="token operator">=</span>y</code></pre> </h1> <pre><code class="prism language-python"><span class="token triple-quoted-string string">''' 函数：判断两个点是否相同 参数:     Point p1      Point p2 '''</span><span class="token keyword">def</span><span class="token function">isSamePoint</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>row<span class="token operator">==</span>p2<span class="token punctuation">.</span>row<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>col<span class="token operator">==</span>p2<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">True</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">False</span><span class="token triple-quoted-string string">''' 函数：获取相邻未被访问的节点(上下左右) 参数说明：     mark：节点标记     point：节点      m：行      n：列 '''</span><span class="token keyword">def</span><span class="token function">getAdjacentNotVisitedNode</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span>point<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>     resP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span>         rep<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>m<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span>         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token keyword">return</span> resP<span class="token keyword">return</span> resP</code></pre> </h1> <pre><code class="prism language-python"><span class="token triple-quoted-string string">''' 函数：寻路函数 参数：     maze：地图     m：行      n：列     pointStack：点栈，用于存放路径 '''</span><span class="token keyword">def</span><span class="token function">mazePath</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>startP<span class="token punctuation">,</span>endP<span class="token punctuation">,</span>pointStack<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>startP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>startP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">or</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>endP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>endP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token comment">#</span>     mark<span class="token operator">=</span>maze<span class="token comment">#将起点入栈</span>     pointStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>startP<span class="token punctuation">)</span>     mark<span class="token punctuation">[</span>startP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>startP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token comment">#栈不空并且栈顶元素不为结束节点</span>     ptop<span class="token operator">=</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>isSamePoint<span class="token punctuation">(</span>ptop<span class="token punctuation">,</span>endP<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         ptop<span class="token operator">=</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>         adjacentNotVisitedNode<span class="token operator">=</span>getAdjacentNotVisitedNode<span class="token punctuation">(</span>mark<span class="token punctuation">,</span>ptop<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">if</span> adjacentNotVisitedNode<span class="token punctuation">.</span>row<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>             pointStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">continue</span>         mark<span class="token punctuation">[</span>adjacentNotVisitedNode<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>adjacentNotVisitedNode<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>         pointStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>adjacentNotVisitedNode<span class="token punctuation">)</span></code></pre> </h1> <pre><code class="prism language-python"><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#地图：0是可走的地方，1是障碍物</span>     maze<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      startP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#起点坐标</span>     endP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#终点坐标</span>          pointStack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#设置点栈</span>     mazePath<span class="token punctuation">(</span>maze<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>startP<span class="token punctuation">,</span>endP<span class="token punctuation">,</span>pointStack<span class="token punctuation">)</span><span class="token comment">#执行寻路函数</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Died.....No way can go'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>         tmpStack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Path:'</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>             tmpStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             pointStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmpStack<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>             p<span class="token operator">=</span>tmpStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;{},{}&gt;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>row<span class="token punctuation">,</span>p<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> </h1> <pre><code class="prism language-python"><span class="token keyword">import</span> numpy<span class="token keyword">as</span> np<span class="token triple-quoted-string string">''' 类:Point 用来标识坐标点 '''</span><span class="token keyword">class</span><span class="token class-name">Point</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">def</span><span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>         self<span class="token punctuation">.</span>row<span class="token operator">=</span>x         self<span class="token punctuation">.</span>col<span class="token operator">=</span>y<span class="token triple-quoted-string string">''' 函数：判断两个点是否相同 参数:     Point p1      Point p2 '''</span><span class="token keyword">def</span><span class="token function">isSamePoint</span><span class="token punctuation">(</span>p1<span class="token punctuation">,</span>p2<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>row<span class="token operator">==</span>p2<span class="token punctuation">.</span>row<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>col<span class="token operator">==</span>p2<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">True</span><span class="token keyword">else</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token boolean">False</span><span class="token triple-quoted-string string">''' 函数：获取相邻未被访问的节点(上下左右) 参数说明：     mark：节点标记     point：节点      m：行      n：列 '''</span><span class="token keyword">def</span><span class="token function">getAdjacentNotVisitedNode</span><span class="token punctuation">(</span>mark<span class="token punctuation">,</span>point<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>     resP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row<span class="token operator">-</span><span class="token number">1</span>         rep<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>n<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token operator">+</span><span class="token number">1</span><span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;</span>m<span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row<span class="token operator">+</span><span class="token number">1</span>         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token keyword">return</span> resP<span class="token keyword">if</span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token operator">&gt;=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>mark<span class="token punctuation">[</span>point<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         resP<span class="token punctuation">.</span>row<span class="token operator">=</span>point<span class="token punctuation">.</span>row         resP<span class="token punctuation">.</span>col<span class="token operator">=</span>point<span class="token punctuation">.</span>col<span class="token operator">-</span><span class="token number">1</span><span class="token keyword">return</span> resP<span class="token keyword">return</span> resP<span class="token triple-quoted-string string">''' 函数：寻路函数 参数：     maze：地图     m：行      n：列     pointStack：点栈，用于存放路径 '''</span><span class="token keyword">def</span><span class="token function">mazePath</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">,</span>startP<span class="token punctuation">,</span>endP<span class="token punctuation">,</span>pointStack<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>startP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>startP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">or</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span>endP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>endP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span><span class="token comment">#</span>     mark<span class="token operator">=</span>maze<span class="token comment">#将起点入栈</span>     pointStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>startP<span class="token punctuation">)</span>     mark<span class="token punctuation">[</span>startP<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>startP<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span><span class="token comment">#栈不空并且栈顶元素不为结束节点</span>     ptop<span class="token operator">=</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">and</span><span class="token punctuation">(</span>isSamePoint<span class="token punctuation">(</span>ptop<span class="token punctuation">,</span>endP<span class="token punctuation">)</span><span class="token operator">==</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>         ptop<span class="token operator">=</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>         adjacentNotVisitedNode<span class="token operator">=</span>getAdjacentNotVisitedNode<span class="token punctuation">(</span>mark<span class="token punctuation">,</span>ptop<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">if</span> adjacentNotVisitedNode<span class="token punctuation">.</span>row<span class="token operator">==</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>             pointStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">continue</span>         mark<span class="token punctuation">[</span>adjacentNotVisitedNode<span class="token punctuation">.</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>adjacentNotVisitedNode<span class="token punctuation">.</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>         pointStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>adjacentNotVisitedNode<span class="token punctuation">)</span><span class="token keyword">def</span><span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#地图：0是可走的地方，1是障碍物</span>     maze<span class="token operator">=</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>      startP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment">#起点坐标</span>     endP<span class="token operator">=</span>Point<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#终点坐标</span>          pointStack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#设置点栈</span>     mazePath<span class="token punctuation">(</span>maze<span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span>startP<span class="token punctuation">,</span>endP<span class="token punctuation">,</span>pointStack<span class="token punctuation">)</span><span class="token comment">#执行寻路函数</span><span class="token keyword">if</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Died.....No way can go'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>         tmpStack<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Path:'</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token builtin">len</span><span class="token punctuation">(</span>pointStack<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>             tmpStack<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pointStack<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>             pointStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">while</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmpStack<span class="token punctuation">)</span><span class="token operator">&gt;</span><span class="token number">0</span><span class="token punctuation">:</span>             p<span class="token operator">=</span>tmpStack<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&lt;{},{}&gt;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>row<span class="token punctuation">,</span>p<span class="token punctuation">.</span>col<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>     main<span class="token punctuation">(</span><span class="token punctuation">)</span></code></pre> <p>输出寻路路径的点坐标：<br /><img decoding="async" src="http://img.555519.xyz/uploads3/20220819/1013add8359ad4dc1bd4e0d7e787c1c3.jpg" alt="Python 实现走迷宫深度优先回溯算法（优质代码）"></p> </div> 			                <div class="clearfix"></div>
                <div class="col-md-12 mt-5">
                                        <p>上一个：<a href="/news/article-84154.htm">动物疫苗批号查询网 动物疫苗批号查询网站</a></p>
                                        <p>下一个：<a href="/news/article-84862.htm">Python实现学生管理系统</a></p>
                                    </div>
                                    </div>
                    <div class="col-md-3">
                        <div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">热门文章</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2"><a href="/news/article-37217.htm" title="公务员国考报名时间表2024（公务员国考报名时间202年）">公务员国考报名时间表2024（公务员国考报名时间202年）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-16-node-share-links.htm" title="「3月16日」每日订阅更新，20.4M/S高速SSR/Clash/Shadowrocket/V2ray/Clash Verge免费节点链接分享">「3月16日」每日订阅更新，20.4M/S高速SSR/Clash/Shadowrocket/V2ray/Clash Verge免费节点链接分享</a></li>
                        <li class="py-2"><a href="/news/article-47593.htm" title="用python实现文件的词频统计">用python实现文件的词频统计</a></li>
                        <li class="py-2"><a href="/news/article-45654.htm" title="动物疫苗的种类有哪些名称图片大全集（动物疫苗的类型）">动物疫苗的种类有哪些名称图片大全集（动物疫苗的类型）</a></li>
                        <li class="py-2"><a href="/news/article-76520.htm" title="全国动物疫苗生产厂家名单最新 全国动物疫苗生产厂家名单最新消息">全国动物疫苗生产厂家名单最新 全国动物疫苗生产厂家名单最新消息</a></li>
                        <li class="py-2"><a href="/news/article-57724.htm" title="国内兽药厂家前50名有（国内十大兽药厂排名）">国内兽药厂家前50名有（国内十大兽药厂排名）</a></li>
                        <li class="py-2"><a href="/news/article-49067.htm" title="宠物用品都有哪些产品（宠物用品是什么）">宠物用品都有哪些产品（宠物用品是什么）</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-2-24-clash-verge-rev-node-share.htm" title="「2月24日」每日订阅更新，21.5M/S高速SSR/Shadowrocket/V2ray/Clash/Clash Verge免费节点链接分享">「2月24日」每日订阅更新，21.5M/S高速SSR/Shadowrocket/V2ray/Clash/Clash Verge免费节点链接分享</a></li>
                        <li class="py-2"><a href="/free-nodes/2025-3-28-free-high-speed-nodes.htm" title="「3月28日」每日订阅更新，19.9M/S高速Clash/V2ray/SSR/Shadowrocket/Clash Verge免费节点链接分享">「3月28日」每日订阅更新，19.9M/S高速Clash/V2ray/SSR/Shadowrocket/Clash Verge免费节点链接分享</a></li>
                        <li class="py-2"><a href="/news/article-55494.htm" title="上海2020年宠物领养活动有哪些项目呢（上海宠物领养救助基地是真的吗）">上海2020年宠物领养活动有哪些项目呢（上海宠物领养救助基地是真的吗）</a></li>
                    </ul>
    </div>
</div>

<div class="panel panel-default">
    <div class="panel-heading">
        <h3 class="panel-title">归纳</h3>
    </div>
    <div class="panel-body">
        <ul class="p-0 x-0" style="list-style: none;margin: 0;padding: 0;">
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">92</span> <a href="/date/2025-03/" title="2025-03 归档">2025-03</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-02/" title="2025-02 归档">2025-02</a></h4>
            </li>
                        <li class="py-2">
                <h4><span class="badge" style="float: right;">84</span> <a href="/date/2025-01/" title="2025-01 归档">2025-01</a></h4>
            </li>
                    </ul>
    </div>
</div>

                    </div>
                </div>
            </div>
        </div>
        <!-- about area end -->
                <!-- footer area start -->
        <footer id="apork-footer-area" class="apork-footer-area">
            <div class="container">
                <div class="row">
                    <div class="col-xl-12 col-lg-12">
                        <div class="footer-copyright text-center py-5">
                    <p>
                        <a href="/">首页</a> | 
                        <a href="/free-node/">免费节点</a> | 
                        <a href="/news/">新闻资讯</a> |
                        <a href="/about-us.htm">关于我们</a> |
                        <a href="/disclaimer.htm">免责申明</a> |
                        <a href="/privacy.htm">隐私申明</a> |
                        <a href="/sitemap.xml">网站地图</a>
                    </p>
                            <p>
                                <a href="/">Verge Github免费机场订阅节点官网</a> 版权所有 Powered by WordPress
                            </p>
                        </div>
                    </div>
                </div>
            </div>
        </footer>
        <!-- footer area end -->
        <!-- scrolltop button -->
        <div class="material-scrolltop"></div>
        <!-- js here -->
        <script src="/assets/website/js/frontend/vergegithub/modernizr-3.5.0.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/jquery-1.12.4.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/popper.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/bootstrap.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/swiper.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/meanmenu.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/magnific-popup.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/owl.carousel.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/waypoints.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/counterup.min.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/scrolltop.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/ajax-form.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/plugins.js"></script>
        <script src="/assets/website/js/frontend/vergegithub/main.js"></script>
        <script src="https://www.freeclashnode.com/assets/js/frontend/invite-url.js"></script>
        <script src="/assets/website/js/frontend/G.js"></script>
    </main>
    <!-- main area end -->
</body>

</html>